/* Copyright 2013-2018 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Carlchristian Eckert
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include <boost/mp11/integral.hpp>
#include <mallocMC/mallocMC.hpp>

namespace picongpu
{

    /* configure the CreationPolicy "Scatter" */
    struct DeviceHeapConfig
    {
        /* 2MiB page can hold around 256 particle frames */
        using pagesize = boost::mp11::mp_int< 2 * 1024 * 1024 >;
        /* accessblocks, regionsize and wastefactor are not conclusively
         * investigated and might be performance sensitive for multiple
         * particle species with heavily varying attributes (frame sizes)
         */
        using accessblocks = boost::mp11::mp_int< 4 >;
        using regionsize = boost::mp11::mp_int< 8 >;
        using wastefactor = boost::mp11::mp_int< 2 >;
        /* resetfreedpages is used to minimize memory fragmentation with
         * varying frame sizes
         */
        using resetfreedpages = boost::mp11::mp_true;
    };

    /* Define a new allocator and call it ScatterAllocator
     * which resembles the behaviour of ScatterAlloc
     */
    using DeviceHeap = mallocMC::Allocator<
        mallocMC::CreationPolicies::Scatter< DeviceHeapConfig >,
        mallocMC::DistributionPolicies::Noop,
        mallocMC::OOMPolicies::ReturnNull,
        mallocMC::ReservePoolPolicies::SimpleCudaMalloc,
        mallocMC::AlignmentPolicies::Shrink<>
    >;

} //namespace picongpu
