/* Copyright 2020 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file incidentField.param
 *
 * Load incident field parameters
 */

#pragma once

#include "picongpu/fields/incidentField/Profiles.def"


namespace picongpu
{
namespace fields
{
namespace incidentField
{

    constexpr float_64 TIME_PERIOD_SI = 20 * SI::DELTA_T_SI;
    constexpr float_64 WAVE_LENGTH_SI = 2.0 * PI * TIME_PERIOD_SI * SI::SPEED_OF_LIGHT_SI;
    constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;
    constexpr float_64 A0 = 8.0;
    constexpr float_64 AMPLITUDE_SI = A0 * UNITCONV_A0_to_Amplitude_SI;

    class FunctorIncidentE
    {
    public:

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FunctorIncidentE( const float3_64 unitField ) : m_unitField(unitField)
        {}

        /** Specify your antenna field E_inc(r,t) here
        *
        * \param cellIdx The total cell id counted from 0,
        *                note that it is fractional
        * \param currentStep The current time step, note that it is fractional
        */
        HDINLINE float3_X
            operator()( const floatD_X & cellIdx,
                const float_X currentStep ) const
        {
            auto const timeSI = currentStep * SI::DELTA_T_SI;
            const float_X sinArg = precisionCast<float_X>( timeSI / TIME_PERIOD_SI * 2.0 * PI );
            return float3_X(0.0, 0.0, AMPLITUDE_SI * math::sin( sinArg ) / m_unitField[2]);
        }
    };

    class FunctorIncidentB
    {
    public:

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FunctorIncidentB( const float3_64 unitField ) : m_unitField(unitField)
        {}

        /** Specify your antenna field B_inc(r,t) here
        *
        * \param cellIdx The total cell id counted from 0,
        *                note that it is fractional
        * \param currentStep The current time step, note that it is fractional
        */
        HDINLINE float3_X
            operator()( const floatD_X & cellIdx,
                const float_X currentStep ) const
        {
            auto const timeSI = currentStep * SI::DELTA_T_SI;
            const float_X sinArg = precisionCast<float_X>( timeSI / TIME_PERIOD_SI * 2.0 * PI );
            const float_X coeff = 1.0 / SI::SPEED_OF_LIGHT_SI;
            return float3_X(coeff * AMPLITUDE_SI * math::sin( sinArg ) / m_unitField[0], 0.0, 0.0);
        }
    };

    using MySource = Source<
        FunctorIncidentE,
        FunctorIncidentB
    >;

    using XMin = /*MySource*/ None;
    using XMax = /*MySource*/ None;
    using YMin = /*MySource*/ None;
    using YMax = /*MySource*/ None;
    using ZMin = /*MySource*/ None;
    using ZMax = /*MySource*/ None;

    /* Gap of the Huygence surface from absorber
     * The gap is in cells, counted from the corrresponding boundary in the
     * normal direction pointing inwards (same as for specifying absorber cells,
     * just this layer is further inside).
     */
    constexpr uint32_t GAP = 0u;
    constexpr uint32_t GAP_FROM_ABSORBER[ 3 ][ 2 ] = {
        { GAP, GAP },  // x direction [negative, positive]
        { GAP, GAP },  // y direction [negative, positive]
        { GAP, GAP }   // z direction [negative, positive]
    };

} // namespace incidentField
} // namespace fields
} // namespace picongpu
