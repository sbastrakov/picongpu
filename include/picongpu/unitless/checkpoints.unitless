/* Copyright 2013-2021 Axel Huebl, Rene Widera, Felix Schmitt, Benjamin Worpitz,
 *                     Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/meta/conversion/MakeSeq.hpp>

/* some forward declarations we need */
#include "picongpu/fields/Fields.def"


namespace picongpu
{
    namespace detail
    {
        /** Additional fields for checkpointing
         *
         * @tparam T_FieldSolver field solver type
         */
        template<typename T_FieldSolver>
        struct AdditionalCheckpointFields
        {
            using type = MakeSeq_t<>;
        };

        /** Only the YeePML solver needs additional fields for checkpointing
         *
         * Currently LehePML is YeePML so automatically works for it as well.
         */
        template<typename... T_Args>
        struct AdditionalCheckpointFields<fields::maxwellSolver::YeePML<T_Args...>>
        {
            using type = MakeSeq_t<fields::absorber::pml::FieldE, fields::absorber::pml::FieldB>;
        };

    } // namespace detail

    /** Note: we need at least FieldE and FieldB for restart
     *        capabilities!
     */
    using NativeFileCheckpointFields = MakeSeq_t<FieldE, FieldB>;

    using AdditionalFileCheckpointFields = typename picongpu::detail::AdditionalCheckpointFields<fields::Solver>::type;

    /* List of particle species for checkpoint/restart */
    using FileCheckpointParticles = VectorAllSpecies;

    /**  List of fields for checkpoint/restart */
    using FileCheckpointFields = MakeSeq_t<NativeFileCheckpointFields, AdditionalFileCheckpointFields>;
} // namespace picongpu
