/* Copyright 2020 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <cstdint>


namespace picongpu
{
namespace fields
{
namespace antenna
{

    /** apply antenna functor
    *
    * @tparam T_numWorkers number of workers
    * @tparam T_PlaneSizeInSuperCell number of cells per dimension which
    *  initialize the laser (size must be less or equal than the supercell size)
    */
    template<
        uint32_t T_numWorkers,
        typename T_PlaneSizeInSuperCell
    >
    struct ApplyAntennaKernel
    {
        template<
            typename T_Acc,
            typename T_Functor,
            typename T_FieldJBox
        >
        HDINLINE void operator()(
            T_Acc & acc,
            T_Functor functor,
            T_FieldJBox fieldJ,
            uint32_t const step,
            DataSpace< simDim > globalOffsetCells,
            DataSpace< simDim > beginGlobalIdx,
            DataSpace< simDim > endGlobalIdx
        ) const
        {
            // Structure copied from laser
            PMACC_CASSERT_MSG(
                __PlaneSizeInSuperCell_y_must_be_less_or_equal_than_SuperCellSize_y,
                T_PlaneSizeInSuperCell::y::value <= SuperCellSize::y::value
            );

            constexpr uint32_t planeSize = pmacc::math::CT::volume< T_PlaneSizeInSuperCell >::type::value;
            const uint32_t workerIdx = cupla::threadIdx(acc).x;

            // offset of the superCell (in cells, without any guards) to the origin of the local domain
            DataSpace< simDim > localSuperCellOffset = DataSpace< simDim >( cupla::blockIdx(acc) );

            // add not handled supercells from LaserFunctor::Unitless::initPlaneY
            localSuperCellOffset.y() += beginGlobalIdx[ 1 ] / SuperCellSize::y::value;
            uint32_t cellOffsetInSuperCellFromInitPlaneY = beginGlobalIdx[ 1 ] % SuperCellSize::y::value;

            mappings::threads::ForEachIdx<
                mappings::threads::IdxConfig<
                    planeSize,
                    T_numWorkers
                >
            > { workerIdx }(
                [&](
                    uint32_t const linearIdx,
                    uint32_t const
                )
            {
                /* cell index within the superCell */
                DataSpace< simDim > cellIdxInSuperCell =
                    DataSpaceOperations< simDim >::template map< T_PlaneSizeInSuperCell >( linearIdx );
                cellIdxInSuperCell.y() += cellOffsetInSuperCellFromInitPlaneY;

                auto const globalCellIdx = globalOffsetCells + localSuperCellOffset + cellIdxInSuperCell;
                // check we are not in the absorber
                bool isInside = true;
                for( uint32_t d = 0; d < simDim; d++ )
                    isInside = isInside && ( globalCellIdx[ d ] >= beginGlobalIdx[ d ])
                        && ( globalCellIdx[ d ] < endGlobalIdx[ d ]);
                if( isInside )
                {
                    auto addJ = functor(
                        globalCellIdx,
                        step
                    );
                    /// add to fieldJ
                }

                //accLaserFunctor( acc, cellIdxInSuperCell );
            }
            );
        }
    };

} // namespace antenna
} // namespace fields
} // namespace picongpu
