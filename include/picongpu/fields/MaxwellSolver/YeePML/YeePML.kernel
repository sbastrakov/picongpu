/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten,
 *                     Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "picongpu/fields/MaxwellSolver/YeePML/Parameters.hpp"
#include <pmacc/algorithms/math/floatMath/floatingPoint.tpp>
#include <pmacc/mappings/threads/ForEachIdx.hpp>
#include <pmacc/mappings/threads/IdxConfig.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>


namespace picongpu
{
namespace fields
{
namespace maxwellSolver
{
namespace yeePML
{

    using namespace pmacc;
    namespace detail
    {
        // Parameters of PML for the local domain
        struct LocalParameters : public Parameters
        {
            // Size in cells, stored as floats to avoid type casts later
            floatD_X negativeBorderSize;
            floatD_X positiveBorderSize;

            LocalParameters( Parameters const parameters,
                Thickness const localThickness
            ):
                Parameters( parameters ),
                negativeBorderSize( precisionCast< float_X >( localThickness.negativeBorder ) ),
                positiveBorderSize( precisionCast< float_X >( localThickness.positiveBorder ) )
            {
            }
        };

        /* Get relative depth of a given index in PML for 1D.
         * Index and local domain size include the guard.
         * So index == numGuardCells corresponds to the external negative PML
         * border, and index == numLocalDomainCells - numGuardCells - 1 
         * corresponds to the external positive PML border.
         * For the internal area result is 0, for points in PML the depth
         * scales from 0 at the internal border to 1 at the external border.
         */
        DINLINE float_X getRelativeDepth(
            float_X const index,
            float_X const numPMLCellsNegative,
            float_X const numPMLCellsPositive,
            uint32_t const numLocalDomainCells,
            uint32_t const numGuardCells
        )
        {
            auto zeroBasedIndex = index - numGuardCells;
            float_X result = 0.0_X;
            auto zeroBasedRightPMLStart = numLocalDomainCells -
                2 * numGuardCells - numPMLCellsPositive;
            if( zeroBasedIndex < numPMLCellsNegative )
                result = ( numPMLCellsNegative - zeroBasedIndex ) / numPMLCellsNegative;
            else if( zeroBasedIndex > zeroBasedRightPMLStart )
                result = ( zeroBasedIndex - zeroBasedRightPMLStart ) / numPMLCellsPositive;
            return result;
        }

        /* Get absorption parameters: sigma, kappa and alpha
         * Index and local domain size include the guard.
         */
        DINLINE void getAbsorptionParameters(
            floatD_X cellIdx,
            LocalParameters const parameters,
            DataSpace< simDim > const numLocalDomainCells,
            DataSpace< simDim > const numGuardCells,
            float3_X * sigma,
            float3_X * kappa,
            float3_X * alpha
        )
        {
            // initialize with values for non-PML area
            *sigma = float3_X::create( 0._X );
            *kappa = float3_X::create( 1._X );
            *alpha = float3_X::create( 0._X );
            for( auto dim = 0; dim < simDim; dim++ )
            {
                auto const relativeDepth = getRelativeDepth(
                    cellIdx[ dim ],
                    parameters.negativeBorderSize[ dim ],
                    parameters.positiveBorderSize[ dim ],
                    numLocalDomainCells[ dim ],
                    numGuardCells[ dim ]
                );
                // Since normally most points are not in PML, avoid costly
                // computing in this case
                if( relativeDepth != 0._X )
                {
                    auto const sigmaKappaGradingCoeff = math::pow(
                        relativeDepth,
                        parameters.sigmaKappaGradingOrder
                    );
                    (*sigma)[ dim ] = parameters.normalizedSigmaMax[ dim ] *
                        sigmaKappaGradingCoeff;
                    (*kappa)[ dim ] = 1._X + ( parameters.kappaMax[ dim ] - 1._X ) *
                        sigmaKappaGradingCoeff;
                    // note that this is only correct when relativeDepth != 0
                    auto const alphaGradingCoeff = math::pow(
                        1._X - relativeDepth,
                        parameters.sigmaKappaGradingOrder
                    );
                    (*alpha)[ dim ] = parameters.normalizedAlphaMax[ dim ] *
                        alphaGradingCoeff;
                }
            }
        }

    } // namespace detail

    /** compute electric field
     *
     * @tparam T_numWorkers number of workers
     * @tparam T_BlockDescription field (electric and magnetic) domain description
     */
    template<
        uint32_t T_workers,
        typename T_BlockDescription
    >
    struct KernelUpdateE
    {
        /** update electric field
         *
         * @tparam T_Curl curl functor type
         * @tparam T_EBox pmacc::DataBox, electric field box type
         * @tparam T_SplitEBox PML split electric field box type
         * @tparam T_BBox pmacc::DataBox, magnetic field box type
         * @tparam T_Mapping mapper functor type
         * @tparam T_Acc alpaka accelerator type
         *
         * @param acc alpaka accelerator
         * @param curl functor to calculate the electric field, interface must be
         *             `operator()(T_BBox)`
         * @param fieldE electric field iterator
         * @param fieldB magnetic field iterator
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_Curl,
            typename T_PMLEBox,
            typename T_EBox,
            typename T_BBox,
            typename T_Mapping,
            typename T_Acc
        >
        DINLINE void operator()(
            T_Acc const & acc,
            T_Curl const curl,
            T_PMLEBox splitE,
            T_EBox fieldE,
            T_BBox const fieldB,
            T_Mapping mapper,
            detail::LocalParameters parameters
        ) const
        {
            // All numbers, offsets and indexes in this kernel include guard
            auto const numGuardSuperCells = mapper.getGuardingSuperCells();
            DataSpace< simDim > numGuardCells( numGuardSuperCells * SuperCellSize::toRT() );
            DataSpace< simDim > const numLocalDomainCells = mapper.getGridSuperCells() * SuperCellSize::toRT();

            // local index (inside the local domain), including guards
            DataSpace< simDim > const superCellIdx( mapper.getSuperCellIndex( DataSpace< simDim >( blockIdx ) ) );
            // starting cell index in the current supercell
            DataSpace< simDim > const startCellIdx = superCellIdx * MappingDesc::SuperCellSize::toRT();

            // Cache E values for the block
            using namespace mappings::threads;
            constexpr uint32_t numWorkers = T_workers;
            uint32_t const workerIdx = threadIdx.x;
            nvidia::functors::Assign assign;
            auto fieldBBlock = fieldB.shift( startCellIdx );
            ThreadCollective<
                T_BlockDescription,
                numWorkers
            > collectiveCacheB( workerIdx );
            auto cachedB = CachedBox::create<
                0u,
                typename T_BBox::ValueType
            >(
                acc,
                T_BlockDescription()
                );
            collectiveCacheB(
                acc,
                assign,
                cachedB,
                fieldBBlock
            );
            __syncthreads();

            constexpr float_X c2 = SPEED_OF_LIGHT * SPEED_OF_LIGHT;
            constexpr float_X dt = DELTA_T;

            // Parallel processing of cells
            constexpr uint32_t numCellsPerSuperCell = pmacc::math::CT::volume< SuperCellSize >::type::value;
            ForEachIdx<
                IdxConfig<
                numCellsPerSuperCell,
                numWorkers
                >
            >{ workerIdx }(
                [&](
                    uint32_t const linearIdx,
                    uint32_t const
                    )
            {
                // cellIdx is cell index in local domain
                DataSpace< simDim > const cellIdxInSuperCell = DataSpaceOperations< simDim >::template map< SuperCellSize >( linearIdx );
                auto cellIdx = startCellIdx + cellIdxInSuperCell;

                auto const pmlIdx = precisionCast< float_X >( cellIdx );
                float3_X sigma, kappa, alpha;
                detail::getAbsorptionParameters(
                    pmlIdx,
                    parameters,
                    numLocalDomainCells,
                    numGuardCells,
                    &sigma,
                    &kappa,
                    &alpha
                );

                bool inPML = ( sigma.x( ) + sigma.y( ) + sigma.z( ) > 0.0 );
                if( inPML )
                {
                    const float3_X damping(
                        math::exp( -sigma[0] * dt ),
                        math::exp( -sigma[1] * dt ),
                        math::exp( -sigma[2] * dt )
                    );
                    auto diff = float3_X::create( dt );
                    for ( uint32_t dim = 0; dim < 3; dim++ )
                        if ( sigma[ dim ] )
                            diff[ dim ] = ( 1.0_X - damping[ dim ] ) / sigma[ dim ];
                    ///std::cout << "E: cellIdx = " << cellIdx << ", damping = " << damping << ", diff = " << diff << "\n";

                    // Update split fields
                    using Difference = typename T_Curl::Difference;
                    const typename Difference::template GetDifference< 0 > Dx;
                    const typename Difference::template GetDifference< 1 > Dy;
                    const typename Difference::template GetDifference< 2 > Dz;
                    auto const localB = cachedB.shift( cellIdxInSuperCell );
                    splitE( cellIdx ).yx = damping.x() * splitE( cellIdx ).yx - diff.x() * c2 * Dx( localB ).z();
                    splitE( cellIdx ).zx = damping.x() * splitE( cellIdx ).zx + diff.x() * c2 * Dx( localB ).y();
                    splitE( cellIdx ).xy = damping.y() * splitE( cellIdx ).xy + diff.y() * c2 * Dy( localB ).z();
                    splitE( cellIdx ).zy = damping.y() * splitE( cellIdx ).zy - diff.y() * c2 * Dy( localB ).x();
                    splitE( cellIdx ).xz = damping.z() * splitE( cellIdx ).xz - diff.z() * c2 * Dz( localB ).y();
                    splitE( cellIdx ).yz = damping.z() * splitE( cellIdx ).yz + diff.z() * c2 * Dz( localB ).x();

                    // Full fields are sums of split fields
                    fieldE( cellIdx ).x() = splitE( cellIdx ).xy + splitE( cellIdx ).xz;
                    fieldE( cellIdx ).y() = splitE( cellIdx ).yx + splitE( cellIdx ).yz;
                    fieldE( cellIdx ).z() = splitE( cellIdx ).zx + splitE( cellIdx ).zy;
                }
                else
                    fieldE( cellIdx ) += curl( cachedB.shift( cellIdxInSuperCell ) ) * c2 * dt;
            }
            );
        }
    };

    /** Update magnetic field
     *
     * @tparam T_numWorkers number of workers
     * @tparam T_BlockDescription field (electric and magnetic) domain description
     */
    template<
        uint32_t T_workers,
        typename T_BlockDescription
    >
    struct KernelUpdateBHalf
    {
        /** update magnetic field
         *
         * @tparam T_Curl curl functor type
         * @tparam T_EBox pmacc::DataBox, electric field box type
         * @tparam T_BBox pmacc::DataBox, magnetic field box type
         * @tparam T_SplitBBox PML split magnetic field box type
         * @tparam T_Mapping mapper functor type
         * @tparam T_Acc alpaka accelerator type
         *
         * @param acc alpaka accelerator
         * @param curl functor to calculate the electric field, interface must be
         *             `operator()(T_EBox)`
         * @param fieldB magnetic field iterator
         * @param fieldE electric field iterator
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_Curl,
            typename T_PMLBBox,
            typename T_EBox,
            typename T_BBox,
            typename T_Mapping,
            typename T_Acc
        >
        DINLINE void operator()(
            T_Acc const & acc,
            T_Curl const curl,
            T_PMLBBox splitB,
            T_BBox fieldB,
            T_EBox const fieldE,
            T_Mapping mapper,
            detail::LocalParameters parameters
        ) const
        {
            // All numbers, offsets and indexes in this kernel include guard
            auto const numGuardSuperCells = mapper.getGuardingSuperCells();
            DataSpace< simDim > numGuardCells( numGuardSuperCells * SuperCellSize::toRT() );
            DataSpace< simDim > const numLocalDomainCells = mapper.getGridSuperCells() * SuperCellSize::toRT();

            // local index (inside the local domain), including guards
            DataSpace< simDim > const superCellIdx( mapper.getSuperCellIndex( DataSpace< simDim >( blockIdx ) ) );
            // starting cell index in the current supercell
            DataSpace< simDim > const startCellIdx = superCellIdx * MappingDesc::SuperCellSize::toRT();

            // Cache E values for the block
            using namespace mappings::threads;
            constexpr uint32_t numWorkers = T_workers;
            uint32_t const workerIdx = threadIdx.x;
            nvidia::functors::Assign assign;
            auto fieldEBlock = fieldE.shift( startCellIdx );
            ThreadCollective<
                T_BlockDescription,
                numWorkers
            > collectiveCacheE( workerIdx );
            auto cachedE = CachedBox::create<
                0u,
                typename T_EBox::ValueType
            >(
                acc,
                T_BlockDescription()
            );
            collectiveCacheE(
                acc,
                assign,
                cachedE,
                fieldEBlock
            );
            __syncthreads();

            // Parallel processing of cells
            constexpr uint32_t numCellsPerSuperCell = pmacc::math::CT::volume< SuperCellSize >::type::value;
            ForEachIdx<
                IdxConfig<
                    numCellsPerSuperCell,
                    numWorkers
                >
            >{ workerIdx }(
                [&](
                    uint32_t const linearIdx,
                    uint32_t const
                )
                {
                    // cellIdx is cell index in local domain
                    DataSpace< simDim > const cellIdxInSuperCell = DataSpaceOperations< simDim >::template map< SuperCellSize >( linearIdx );
                    auto cellIdx = startCellIdx + cellIdxInSuperCell;

                    constexpr float_X halfDt = 0.5_X * DELTA_T;
                    // Shift indexes so that 0 is start of the local domain without guard
                    // With the current grid for B need to shift by a half cell
                    auto const pmlIdx = float3_X::create( 0.5_X ) +
                        precisionCast< float_X >( cellIdx );
                    float3_X sigma, kappa, alpha;
                    detail::getAbsorptionParameters(
                        pmlIdx,
                        parameters,
                        numLocalDomainCells,
                        numGuardCells,
                        &sigma,
                        &kappa,
                        &alpha
                    );

                    bool inPML = ( sigma.x( ) + sigma.y( ) + sigma.z( ) > 0.0 );
                    if( inPML )
                    {
                        float3_X const damping(
                            math::exp( -sigma[0] * halfDt ),
                            math::exp( -sigma[1] * halfDt ),
                            math::exp( -sigma[2] * halfDt )
                        );
                        auto diff = float3_X::create( halfDt );
                        for ( auto dim = 0; dim < 3; dim++ )
                            if( sigma[ dim ] )
                                diff[ dim ] = ( 1.0_X - damping[ dim ] ) / sigma[ dim ];
                        ///std::cout << "cellIdx = " << cellIdx << ", damping = " << damping << ", diff = " << diff << "\n";

                        // Update split fields
                        using Difference = typename T_Curl::Difference;
                        const typename Difference::template GetDifference< 0 > Dx;
                        const typename Difference::template GetDifference< 1 > Dy;
                        const typename Difference::template GetDifference< 2 > Dz;
                        auto const localE = cachedE.shift( cellIdxInSuperCell );
                        splitB( cellIdx ).yx = damping.x() * splitB( cellIdx ).yx + diff.x() * Dx( localE ).z();
                        splitB( cellIdx ).zx = damping.x() * splitB( cellIdx ).zx - diff.x() * Dx( localE ).y();
                        splitB( cellIdx ).xy = damping.y() * splitB( cellIdx ).xy - diff.y() * Dy( localE ).z();
                        splitB( cellIdx ).zy = damping.y() * splitB( cellIdx ).zy + diff.y() * Dy( localE ).x();
                        splitB( cellIdx ).xz = damping.z() * splitB( cellIdx ).xz + diff.z() * Dz( localE ).y();
                        splitB( cellIdx ).yz = damping.z() * splitB( cellIdx ).yz - diff.z() * Dz( localE ).x();

                        // Full fields are sums of split fields
                        fieldB( cellIdx ).x() = splitB( cellIdx ).xy + splitB( cellIdx ).xz;
                        fieldB( cellIdx ).y() = splitB( cellIdx ).yx + splitB( cellIdx ).yz;
                        fieldB( cellIdx ).z() = splitB( cellIdx ).zx + splitB( cellIdx ).zy;
                    }
                    else
                    {
                        fieldB( cellIdx ) -= curl( cachedE.shift( cellIdxInSuperCell ) ) * halfDt;
                    }
                }
            );
        }
    };

} // namespace yeePML
} // namespace maxwellSolver
} // namespace fields
} // namespace picongpu
