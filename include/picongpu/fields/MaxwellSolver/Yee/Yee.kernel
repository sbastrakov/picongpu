/* Copyright 2013-2021 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/algorithms/math/floatMath/floatingPoint.tpp>
#include <pmacc/mappings/threads/ForEachIdx.hpp>
#include <pmacc/mappings/threads/IdxConfig.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>

#include <cstdint>


namespace picongpu
{
    namespace fields
    {
        namespace maxwellSolver
        {
            namespace yee
            {
                /** Functor to update electric field by a time step using standard FDTD with the given curl
                 *
                 * @tparam T_CurlB curl functor type to be applied to magnetic field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlB>
                class UpdateEFunctor
                {
                public:
                    /** Update electric field at the given position
                     *
                     * @tparam T_LocalBBox local magnetic field box type
                     * @tparam T_LocalEBox local electric field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localE
                     */
                    template<typename T_LocalBBox, typename T_LocalEBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalBBox const localB,
                        T_LocalEBox localE)
                    {
                        constexpr auto c2 = SPEED_OF_LIGHT * SPEED_OF_LIGHT;
                        constexpr auto dt = DELTA_T;
                        localE() += curl(localB) * c2 * dt;
                    }

                private:
                    T_CurlB const curl = T_CurlB{};
                };

                /** Functor to update magnetic field by half a time step using standard FDTD with the given curl
                 *
                 * @tparam T_CurlE curl functor type to be applied to electric field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlE>
                class UpdateBHalfFunctor
                {
                public:
                    /** Update magnetic field at the given position
                     *
                     * @tparam T_LocalEBox local electric field box type
                     * @tparam T_LocalBBox local magnetic field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localB
                     */
                    template<typename T_LocalEBox, typename T_LocalBBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalEBox const localE,
                        T_LocalBBox localB)
                    {
                        constexpr auto halfDt = 0.5_X * DELTA_T;
                        localB() -= curl(localE) * halfDt;
                    }

                private:
                    T_CurlE const curl = T_CurlE{};
                };

                /** Kernel to update the electric field
                 *
                 * @tparam T_numWorkers number of workers
                 * @tparam T_BlockDescription field (electric and magnetic) domain description
                 */
                template<uint32_t T_numWorkers, typename T_BlockDescription>
                struct KernelUpdateE
                {
                    /** Update the electric field using the given functor
                     *
                     * @tparam T_Acc alpaka accelerator type
                     * @tparam T_Mapping mapper functor type
                     * @tparam T_UpdateFunctor update functor type
                     * @tparam T_BBox pmacc::DataBox, magnetic field box type
                     * @tparam T_EBox pmacc::DataBox, electric field box type
                     *
                     * @param acc alpaka accelerator
                     * @param mapper functor to map a block to a supercell
                     * @param updateFunctor update functor
                     * @param fieldB magnetic field iterator
                     * @param fieldE electric field iterator
                     */
                    template<
                        typename T_Acc,
                        typename T_Mapping,
                        typename T_UpdateFunctor,
                        typename T_BBox,
                        typename T_EBox>
                    DINLINE void operator()(
                        T_Acc const& acc,
                        T_Mapping const mapper,
                        T_UpdateFunctor updateFunctor,
                        T_BBox const fieldB,
                        T_EBox fieldE) const
                    {
                        /* Each block processes grid values in a supercell,
                         * the index includes guards, same as all indices in this kernel
                         */
                        auto const blockBeginIdx = mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc)))
                            * MappingDesc::SuperCellSize::toRT();

                        // Cache B values for the block
                        using namespace mappings::threads;
                        constexpr auto numWorkers = T_numWorkers;
                        auto const workerIdx = cupla::threadIdx(acc).x;
                        pmacc::math::operation::Assign assign;
                        auto fieldBBlock = fieldB.shift(blockBeginIdx);
                        ThreadCollective<T_BlockDescription, numWorkers> collectiveCacheB(workerIdx);
                        auto cachedB = CachedBox::create<0u, typename T_BBox::ValueType>(acc, T_BlockDescription());
                        collectiveCacheB(acc, assign, cachedB, fieldBBlock);
                        cupla::__syncthreads(acc);

                        // Threads process values of the supercell in parallel
                        constexpr auto numCellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;
                        ForEachIdx<IdxConfig<numCellsPerSuperCell, numWorkers>>{workerIdx}(
                            [&](uint32_t const linearIdx, uint32_t const) {
                                auto const idxInSuperCell
                                    = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);
                                auto const gridIdx = blockBeginIdx + idxInSuperCell;
                                updateFunctor(gridIdx, cachedB.shift(idxInSuperCell), fieldE.shift(gridIdx));
                            });
                    }
                };

                /** Kernel to update the magnetic field
                 *
                 * @tparam T_numWorkers number of workers
                 * @tparam T_BlockDescription field (electric and magnetic) domain description
                 */
                template<uint32_t T_numWorkers, typename T_BlockDescription>
                struct KernelUpdateB
                {
                    /** Update the magnetic field using the given functor
                     *
                     * @tparam T_Acc alpaka accelerator type
                     * @tparam T_Mapping mapper functor type
                     * @tparam T_UpdateFunctor update functor type
                     * @tparam T_EBox pmacc::DataBox electric field box type
                     * @tparam T_BBox pmacc::DataBox magnetic field box type
                     *
                     * @param acc alpaka accelerator
                     * @param mapper functor to map a block to a supercell
                     * @param updateFunctor update functor
                     * @param fieldE electric field iterator
                     * @param fieldB magnetic field iterator
                     */
                    template<
                        typename T_Acc,
                        typename T_Mapping,
                        typename T_UpdateFunctor,
                        typename T_EBox,
                        typename T_BBox>
                    DINLINE void operator()(
                        T_Acc const& acc,
                        T_Mapping const mapper,
                        T_UpdateFunctor updateFunctor,
                        T_EBox const fieldE,
                        T_BBox fieldB) const
                    {
                        /* Each block processes grid values in a supercell,
                         * the index includes guards, same as all indices in this kernel
                         */
                        auto const blockBeginIdx = mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc)))
                            * MappingDesc::SuperCellSize::toRT();

                        // Cache E values for the block
                        using namespace mappings::threads;
                        constexpr auto numWorkers = T_numWorkers;
                        auto const workerIdx = cupla::threadIdx(acc).x;
                        pmacc::math::operation::Assign assign;
                        auto fieldEBlock = fieldE.shift(blockBeginIdx);
                        ThreadCollective<T_BlockDescription, numWorkers> collectiveCacheE(workerIdx);
                        auto cachedE = CachedBox::create<0u, typename T_EBox::ValueType>(acc, T_BlockDescription());
                        collectiveCacheE(acc, assign, cachedE, fieldEBlock);
                        cupla::__syncthreads(acc);

                        // Threads process values of the supercell in parallel
                        constexpr auto numCellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;
                        ForEachIdx<IdxConfig<numCellsPerSuperCell, numWorkers>>{workerIdx}(
                            [&](uint32_t const linearIdx, uint32_t const) {
                                auto const idxInSuperCell
                                    = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);
                                auto const gridIdx = blockBeginIdx + idxInSuperCell;
                                updateFunctor(gridIdx, cachedE.shift(idxInSuperCell), fieldB.shift(gridIdx));
                            });
                    }
                };

            } // namespace yee
        } // namespace maxwellSolver
    } // namespace fields
} // namespace picongpu
